{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["API_KEY","Header","Layout","Content","Footer","Search","Input","TextTitle","Typography","Title","SearchBox","searchHandler","Row","Col","lg","md","placeholder","enterButton","size","onSearch","value","ColCardBox","imdbID","Poster","Type","ShowDetail","DetailRequest","ActivateModal","Year","sm","className","cover","alt","src","onClick","fetch","then","resp","json","response","catch","message","color","MovieDetail","imdbRating","Rated","Runtime","Genre","Plot","level","style","marginBottom","Loader","margin","textAlign","App","useState","data","setData","error","setError","loading","setLoading","q","setQuery","activateModal","setActivateModal","detail","setShowDetail","detailRequest","setDetailRequest","useEffect","Response","Error","marginTop","padding","background","minHeight","gutter","type","justify","length","map","result","index","key","title","centered","visible","onCancel","footer","width","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.73fb5e26.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { \r\n    Layout, \r\n    Input, \r\n    Card, \r\n    Tag, \r\n    Spin, \r\n    Alert, \r\n    Modal, \r\n    Typography \r\n} from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport { Col, Row } from 'react-bootstrap';\r\n\r\nconst API_KEY = '715289b';\r\nconst { Header, Content, Footer } = Layout;\r\nconst { Search } = Input;\r\nconst TextTitle = Typography.Title;\r\n\r\n// ---Tanpilan Pencarian--- \r\nconst SearchBox = ({searchHandler}) => {\r\n    return (\r\n        <Row>\r\n            <Col lg={6} md={6}>\r\n                <Search\r\n                    placeholder=\"Search\"\r\n                    enterButton=\"Search\"\r\n                    size=\"large\"\r\n                    onSearch={value => searchHandler(value)}\r\n                />\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\n// ---Tanpilan Card Movie---\r\nconst ColCardBox = ({Title, imdbID, Poster, Type, ShowDetail, DetailRequest, ActivateModal, Year}) => {\r\n\r\n    const clickHandler = () => {\r\n\r\n        ActivateModal(true);\r\n        DetailRequest(true);\r\n\r\n        fetch(`http://www.omdbapi.com/?i=${imdbID}&apikey=${API_KEY}`)\r\n        .then(resp => resp)\r\n        .then(resp => resp.json())\r\n        .then(response => {\r\n            DetailRequest(false);\r\n            ShowDetail(response);\r\n        })\r\n        .catch(({message}) => {\r\n            DetailRequest(false);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Col  lg={3} md={4} sm={6}>\r\n            <div className=\"gutter-box\">\r\n                <Card\r\n                    cover={\r\n                        <img\r\n                            alt={Title}\r\n                            src={Poster === 'N/A' ? 'https://placehold.it/198x264&text=Image+Not+Found' : Poster}\r\n                        />\r\n                    }\r\n                    className='mb-3'\r\n                    onClick={() => clickHandler()}\r\n                >\r\n\r\n                    <Row>\r\n                        <h6>{Title} ({Year})</h6>\r\n\r\n                    </Row>   \r\n                    \r\n                    <Row>\r\n                        <Col md>\r\n                            <Tag color=\"blue\">{Type}</Tag>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n                </Card>\r\n            </div>\r\n        </Col>\r\n    )\r\n}\r\n\r\n// ---Tanpilan Model Movie Detail---\r\nconst MovieDetail = ({Title, Poster, imdbRating, Rated, Runtime, Genre, Plot, Year}) => {\r\n    return (\r\n        <Row>\r\n            <Col md className='mb-3'>\r\n                <img \r\n                    src={Poster === 'N/A' ? 'https://placehold.it/198x264&text=Image+Not+Found' : Poster} \r\n                    alt={Title} \r\n                />\r\n            </Col>\r\n            <Col md>\r\n                <Row>\r\n                    <TextTitle level={4}>{Title} ({Year})</TextTitle>\r\n                </Row>\r\n                <Row style={{marginBottom: '20px'}}>\r\n                    <Col>\r\n                        <Tag>{Rated}</Tag> \r\n                        <Tag>{Runtime}</Tag> \r\n                        <Tag>{Genre}</Tag>\r\n                        <Tag>Ratings: {imdbRating}</Tag>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col><p className='text-justify'>{Plot}</p></Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\n// ---Tanpilan Loading---\r\nconst Loader = () => (\r\n    <div style={{margin: '20px 0', textAlign: 'center'}}>\r\n        <Spin />\r\n    </div>\r\n)\r\n\r\n\r\n// ---App---\r\nfunction App() {\r\n\r\n    const [data, setData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [q, setQuery] = useState('batman');\r\n    const [activateModal, setActivateModal] = useState(false);\r\n    const [detail, setShowDetail] = useState(false);\r\n    const [detailRequest, setDetailRequest] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        setLoading(true);\r\n        setError(null);\r\n        setData(null);\r\n\r\n        fetch(`http://www.omdbapi.com/?s=${q}&apikey=${API_KEY}`)\r\n        .then(resp => resp)\r\n        .then(resp => resp.json())\r\n        .then(response => {\r\n            if (response.Response === 'False') {\r\n                setError(response.Error);\r\n            }\r\n            else {\r\n                setData(response.Search);\r\n            }\r\n\r\n            setLoading(false);\r\n        })\r\n        .catch(({message}) => {\r\n            setError(message);\r\n            setLoading(false);\r\n        })\r\n\r\n    }, [q]);\r\n\r\n    \r\n    return (\r\n        <div className=\"App\">\r\n            <Layout className=\"layout\">\r\n                <Header>\r\n                    <div style={{ textAlign: 'center'}}>\r\n                        <TextTitle style={{color: '#ffffff', marginTop: '14px'}} level={3}>Simple Movie List App</TextTitle>\r\n                    </div>\r\n                </Header>\r\n                <Content style={{ padding: '0 50px' }}>\r\n                    <div style={{ background: '#fff', padding: 24, minHeight: 280 }}>\r\n                        <SearchBox searchHandler={setQuery} />\r\n                        <br />\r\n                        \r\n                        <Row gutter={16} type=\"flex\" justify=\"center\">\r\n                            { loading &&\r\n                                <Loader />\r\n                            }\r\n\r\n                            { error !== null &&\r\n                                <div style={{margin: '20px 0'}}>\r\n                                    <Alert message={error} type=\"error\" />\r\n                                </div>\r\n                            }\r\n                            \r\n                            { data !== null && data.length > 0 && data.map((result, index) => (\r\n                                <ColCardBox \r\n                                    ShowDetail={setShowDetail} \r\n                                    DetailRequest={setDetailRequest}\r\n                                    ActivateModal={setActivateModal}\r\n                                    key={index} \r\n                                    {...result} \r\n                                />\r\n                            ))}\r\n                        </Row>\r\n                    </div>\r\n                    <Modal\r\n                        title='Detail'\r\n                        centered\r\n                        visible={activateModal}\r\n                        onCancel={() => setActivateModal(false)}\r\n                        footer={null}\r\n                        width={800}\r\n                        >\r\n                        { detailRequest === false ?\r\n                            (<MovieDetail {...detail} />) :\r\n                            (<Loader />) \r\n                        }\r\n                    </Modal>\r\n                </Content>\r\n                <Footer style={{ textAlign: 'center' }}>All Right Reserves. &copy; OMDB API</Footer>\r\n            </Layout>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}